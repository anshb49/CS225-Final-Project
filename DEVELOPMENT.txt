Week 1: 11/16 - 11/30
    After developing the initial idea for the project, as a group, we started the week by simply
    cloning the repository and getting accustomed to the system by which we would have to push and
    pull files. Next, we began our actual work by trying to add out graph's data to the repository,
    so that as a group we could sift through it and make sense of all of the information in the form
    that it was given in. In developing a strategy for using the data, we realized that as a group we
    were uncomfortable with the way the information was distributed amongst various files, and not
    conviniently in a centralized location. Due to this, we decided to use a different data set instead
    (originally we were using data from Twitter, but we moved to Twitch data instead). This was a simple
    change, as we felt we were maintaining the integrity of our original project idea, but simply changed
    the specific set of data we were looking at. In order to maintain consistency, we changed our GOALS
    document to reflect these changes that we made, and communicated with our team staff mentor. For technical
    work, we added and familiarized ourselves with the graph class provided by the course staff for Lab_ML
    and started our project by writing a main.cpp file. We added a means to parse through the data 
    dilineated by commas in our CSV data files in order to make the data usable for the graph we plan to 
    construct. In order to make sure this worked, we added some basic test cases that verified that we were
    reading the right values in the corresponding locations in the vectors created for the data. Finally, 
    we wrote basic pseudocode for the implementation of the graph itself, as this reflected the goals that 
    we set for ourselves for the coming up week; we decided that to stay on schedule for the deadlines, we want
    to finish implementing the graph by the end of week 2, and also complete one of the two algorithms (if not
    both) that we are supposed to have done by the time of our mid-project meeting.  

Week 2: 11/30 - 12/7
    During this second week, as a group we accomplished a lot more of the technical coding parts of the project.
    One of the first tasks we decided to accomplish was the implementation of our graph itself. We did this by
    writing a GraphCreator class, which we then utilized to make the graph itself. At the time, we did 
    this as we felt it to be a good starting point and were not sure what else we could do, but this ended up being
    very important as a foundational piece to our project, as we would end up using these functions in other files
    that we went on to write. The second thing we did is perfect our file parsing, as we tested this a bit more
    thoroughly than we did last week to make sure our graph would properly work. Going into the weekend, we 
    went ahead and had our midpoint meeting with our mentor, and utilized this to not only update our mentor about
    what work we had done so far but also as an opportunity to check our pace and make sure that we were working at 
    an appropriate speed (in terms of the amount of work we had finished up to this point versus what our mentor felt
    should be done). The remainder of the weekend we spent working on implementing our BFS algorithim. This took us
    longer than expected, as at first we tried to implement our own iterator and do the BFS in a way similar to how it
    was done in MP Traversals. However, after some time we realized that we were making it much more complicated than 
    it needed to be, and so we adjusted by moving the function to where the graph implementation was and invoking
    it there, based on an implementation provided in the CS 225 Resources page on the website. Going into the third week, 
    we have started the Dijkstra implementation, and aim to finish both that and A* Search by Tuesday so that we can thoroughly
    test what we have done and work on the presentation aspect of the project on the last two days.   

Week 3: 12/7 - 12/11
    During the last week, the goal we wanted to accomplish was very simple: finish the coding aspects of the project
    by Wednesday so we could spend Thursday and Friday working on the presentation aspect of it. This started with
    finishing up the Dijkstra algorithm, although we encountered some issues with bugs that caused us to spend more
    time than we would have liked. One large issue we dealt with was a linker error that came up due in our Makefile,
    preventing us from intensely testing our Dijkstra algorithm. We spent a lot of time trying to match the
    implementation of our Makefile to others given in class, and eventually what we did to fix it was simply redo
    the whole Makefile, and make it much shorter than what we had originally (as is the case for the Makefiles for
    later lab and MP assignments). Another step we had to take to fix the bug was re-implement some parts of our GraphCreator
    class, which we thought would be easiest to do by replacing it with a new class called "GraphIntializer" in the
    interpretgraph.h and .cpp files. Other than this issue, the Dijkstra algorithm was not too difficult to implement once
    we as a group reviewed and understood how to use a priority queue. Taking advantage of this allowed us to follow the
    pseudocode in the resources page on the course website. Finally, this left us with the complex algorithm, A* search.
    To complete A*, the big design decision we had to make was selecting a heuristic function. Since the selection of this
    function could be arbitrary, we decided to keep it simple by just using the number of views that our destination node had,
    which also happened to be our edge weight. Using this function, the implementation of A* was fairly similar to Dijkstra,
    so we took advantage of the lessons we learned while implementing that to implement this last algorithm. Afterward, we
    began formalizing our test cases into a test file to confirm that our algorithms were working as expected. This left us
    with all of Friday to record our presentation finalize our submission components. 
